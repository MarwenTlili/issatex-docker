<?php
namespace App\Tests\Api;

use ApiPlatform\Symfony\Bundle\Test\ApiTestCase;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;
use App\Entity\User;

class UsersTest extends ApiTestCase {
    // This trait provided by AliceBundle will take care of refreshing the database content to a known state before each test
    use RefreshDatabaseTrait;

    public function testGetCollection(): void {
        // The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
        $response = static::createClient()->request('GET', '/api/users');

        $this->assertResponseIsSuccessful();
        // Asserts that the returned content type is JSON-LD (the default)
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        // Asserts that the returned JSON is a superset of this one
        $this->assertJsonContains([
            '@context' => '/contexts/User',
            '@id' => '/api/users',
            '@type' => 'hydra:Collection',
            'hydra:totalItems' => 40,
            'hydra:view' => [
                '@id' => '/api/users?page=1',
                '@type' => 'hydra:PartialCollectionView',
                'hydra:first' => '/api/users?page=1',
                'hydra:last' => '/api/users?page=2',
                'hydra:next' => '/api/users?page=2',
            ],
        ]);

        // Because test fixtures are automatically loaded between each test, you can assert on them
        $this->assertCount(30, $response->toArray()['hydra:member']);

        // Asserts that the returned JSON is validated by the JSON Schema generated for this resource by API Platform
        // This generated JSON Schema is also used in the OpenAPI spec!
        $this->assertMatchesResourceCollectionJsonSchema(User::class);
    }

    public function testCreateUser(): void {
        $response = static::createClient()->request('POST', '/api/users', ['json' => [
            "username" => "test",
			"email" => "test@example.com",
			"roles" => [
				"ROLE_TEST"
			],
			"plainPassword" => "test",
			"avatar" => "/tmp/43a97930f87e803c87327e9033c99dda.png"
        ]]);

        $this->assertResponseStatusCodeSame(201);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
        $this->assertJsonContains([
            '@context' => '/contexts/User',
            '@type' => 'User',
            "username" => "test",
			"email" => "test@example.com",
			"roles" => [
				"ROLE_TEST"
			],
			"avatar" => "/tmp/43a97930f87e803c87327e9033c99dda.png"
        ]);
        $this->assertMatchesRegularExpression('~[A-Z0-9]{26}$~', $response->toArray()['@id']);
        $this->assertMatchesResourceItemJsonSchema(User::class);
    }

    public function testCreateInvalidUser(): void {
        static::createClient()->request('POST', '/api/users', ['json' => [
            "username" => "test",
			"email" => "test@example.com",
			"roles" => "INVALID_ROLE",
			"plainPassword" => "test",
			"avatar" => "/tmp/43a97930f87e803c87327e9033c99dda.png"
        ]]);

        $this->assertResponseStatusCodeSame(400);
        $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

        $this->assertJsonContains([
            '@context' => '/contexts/Error',
            '@type' => 'hydra:Error',
            'hydra:title' => 'An error occurred',
            'hydra:description' => 'The type of the "roles" attribute must be "array", "string" given.',
        ]);
    }

    public function testUpdateUser(): void {
        $client = static::createClient();
        // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
        // email wziemann@hotmail.com has been generated by Alice when loading test fixtures.
        // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
        $iri = $this->findIriBy(User::class, ['email' => 'wziemann@hotmail.com']);

        $client->request('PATCH', $iri, [
			'headers' => [
				'Content-Type' => 'application/merge-patch+json',
			],
			'json' => [
				'username' => 'tsteuber_Test',
			]
		]);

        $this->assertResponseIsSuccessful();
        $this->assertJsonContains([
            '@id' => $iri,
			'email' => 'wziemann@hotmail.com',
            'username' => 'tsteuber_Test'
        ]);
    }

    public function testDeleteUser(): void {
        $client = static::createClient();
        $iri = $this->findIriBy(User::class, ['email' => 'wziemann@hotmail.com']);

        $client->request('DELETE', $iri);

        $this->assertResponseStatusCodeSame(204);
        $this->assertNull(
            // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
            static::getContainer()->get('doctrine')->getRepository(User::class)->findOneBy(['email' => 'wziemann@hotmail.com'])
        );
    }

//     public function testLogin(): void {
//         $response = static::createClient()->request('POST', '/login', ['json' => [
//             'email' => 'admin@example.com',
//             'password' => 'admin',
//         ]]);
        
//         $this->assertResponseIsSuccessful();
//     }
}