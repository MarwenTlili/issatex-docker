security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        # Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User: 'auto'
    
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        users:
            entity:
                class: App\Entity\User
                property: email
        # user provider which is able to create User instances from the JWT payload.
        # there should be no need for loading the user from the database when authenticating a JWT Token
        jwt:
            lexik_jwt:
                class: App\Security\User
    
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider: jwt
            jwt: ~
        main:
            provider: users
            stateless: true
            json_login:
                check_path: auth # or api_login_check as defined in config/routes.yaml
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            refresh_jwt:
                check_path: api_refresh_token # or, you may use the `api_refresh_token` route name
            logout:
                path: api_token_invalidate

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/$, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI docs
        # Allows /auth OR /token/refresh OR /token/invalidate
        - { path: ^/(auth|token/(refresh|invalidate)), roles: PUBLIC_ACCESS } 
        - { path: ^/api/users, methods: [POST], roles: PUBLIC_ACCESS } # Allow posting new user without JWT auth
        - { path: ^/contexts, roles: PUBLIC_ACCESS } # Allow /contexts/Entrypoint, /contexts/Article, ...
        - { path: ^/_profiler, roles: PUBLIC_ACCESS}
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
